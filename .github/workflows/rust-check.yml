env:
  RUST_BACKTRACE: 1

on:
  push:
    branches:
    - '*'
  pull_request:
  workflow_dispatch:
  workflow_call:
    inputs:
      run_on_windows:
        description: Enable checks on windows
        required: false
        type: boolean
      run_minimal_version_check:
        description: Test against minimal versions
        default: false
        required: false
        type: boolean
      windows_before_script:
        default: ''
        required: false
        type: string
      ubuntu_before_script:
        default: ''
        required: false
        type: string
      mac_before_script:
        default: ''
        required: false
        type: string
      mutation_testing:
        default: false
        required: false
        type: boolean



jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the stable rust toolchain
      with:
        toolchain: stable
    - run: cargo check
      name: Check package and all of its dependencies for errors

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          pre_script: ${{ inputs.mac_before_script }}
        - os: ubuntu-latest
          pre_script: ${{ inputs.ubuntu_before_script }}
        - os: windows-latest
          pre_script: ${{ inputs.windows_before_script }}
    steps:
    - run: ${{ matrix.pre_script }}
      name: Install dependencies
      if: (runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )) && matrix.pre_script != ''
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the stable rust toolchain
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        toolchain: stable
    - run: cargo test
      name: Execute all unit and integration tests and build examples
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )

  builds-with-minimal-deps:
    if: inputs.run_minimal_version_check == true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          pre_script: ${{ inputs.mac_before_script }}
        - os: ubuntu-latest
          pre_script: ${{ inputs.ubuntu_before_script }}
        - os: windows-latest
          pre_script: ${{ inputs.windows_before_script }}
    steps:
    - run: ${{ matrix.pre_script }}
      name: Install dependencies
      if: (runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )) && matrix.pre_script != ''
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the stable rust toolchain
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        toolchain: nightly
    - run: rm Cargo.lock || true
      shell: bash
      name: Remove any existing dependency calculations
    - run: cargo build -Z minimal-versions
      name: Build with minimum versions of dependencies
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )

  lints:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
        - os: ubuntu-latest
        - os: windows-latest
    steps:
    - name: Set up Homebrew
      id: set-up-homebrew
      if: runner.os != 'Windows'
      uses: Homebrew/actions/setup-homebrew@master
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the stable rust toolchain
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        toolchain: stable
        components: rustfmt, clippy
    - run: cargo fmt --all -- --check
      name: Check the formatting of the code
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
    - run: cargo clippy --all-targets --all-features
      name: Lint the code with clippy
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )


  mutation-testing:
    runs-on: ubuntu-latest
    if: inputs.mutation_testing == true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        name: Checkout the repository
      - uses: cargo-bins/cargo-binstall@main
        name: Install cargo binstall
      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        name: Setup the cache
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo binstall --no-confirm --locked cargo-mutants
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      - run: cargo mutants -vV --in-place
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutants-out
          path: mutants.out

  nfpm-build:
    runs-on: ubuntu-latest
    env:
      GOARCH: amd64
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install -y nfpm
      - uses: dtolnay/rust-toolchain@master
        name: Install rust toolchain
        with:
          toolchain: stable
      - run: |
          if [ -f "nfpm.yaml" ] ; then
            cargo build --release

            cd target/release
            nfpm pkg --packager archlinux --config ./../../nfpm.yaml --target /tmp/
            nfpm pkg --packager rpm --config ./../../nfpm.yaml --target /tmp/
            nfpm pkg --packager deb --config ./../../nfpm.yaml --target /tmp/
            nfpm pkg --packager apk --config ./../../nfpm.yaml --target /tmp/
          fi


  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - run: |
        if [ ! -f "Cargo.lock" ]; then
          cargo build
        fi
      name: Initialize cargo if needed
    - uses: rustsec/audit-check@69366f33c96575abad1ee0dba8212993eecbe998 # v2.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      name: Audit check cargo packages
      
  security-audit-minimal:
    if: inputs.run_minimal_version_check == true
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the nightly rust toolchain
      with:
        toolchain: nightly
    - run: |
        if [ ! -f "Cargo.lock" ]; then
          cargo build
        fi
      name: cargo install
    - run: cargo update -Z minimal-versions
      name: Install the oldest possible versions of dependencies
    - uses: rustsec/audit-check@69366f33c96575abad1ee0dba8212993eecbe998 # v2.0.0
      name: Audit check cargo packages
      with:
        token: ${{ github.token }}
  bench:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          pre_script: ${{ inputs.mac_before_script }}
        - os: ubuntu-latest
          pre_script: ${{ inputs.ubuntu_before_script }}
        - os: windows-latest
          pre_script: ${{ inputs.windows_before_script }}
    steps:
    - run: ${{ matrix.pre_script }}
      name: Install dependencies
      if: (runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )) && matrix.pre_script != ''
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      name: Checkout the repository
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
    - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      name: Setup the cache
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: dtolnay/rust-toolchain@master
      name: Setup the stable rust toolchain
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      with:
        toolchain: stable
    - run: cargo bench
      name: Execute all benchmarks
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
