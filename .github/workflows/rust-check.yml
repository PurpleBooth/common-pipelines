env:
  RUST_BACKTRACE: 1

on:
  push:
    branches:
      - "*"
  pull_request:
  workflow_dispatch:
  workflow_call:
    inputs:
      run_on_windows:
        description: 'Enable checks on windows'
        default: true
        required: false
        type: boolean
      windows_before_script:
        default: ""
        required: false
        type: string
      ubuntu_before_script:
        default: ""
        required: false
        type: string
      mac_before_script:
        default: ""
        required: false
        type: string


jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: actions/cache@v2
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: check
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            pre_script: ${{ inputs.mac_before_script }}
          - os: ubuntu-latest
            pre_script: ${{ inputs.ubuntu_before_script }}
          - os: windows-latest
            pre_script: ${{ inputs.windows_before_script }}
    steps:
      - run: ${{ matrix.pre_script }}
        if: (runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )) && matrix.pre_script != ''
      - uses: actions/checkout@v2.3.5
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      - uses: actions/cache@v2
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          command: test
  lints:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
    steps:
      - uses: actions/checkout@v2.3.5
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      - uses: actions/cache@v2
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          profile: minimal
          toolchain: nightly
          default: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1.0.3
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1.0.3
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings -Dclippy::all -D clippy::pedantic -D clippy::cargo
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.5
        name: Checkout the repository
      - uses: actions/cache@v2
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/audit-check@v1.2.0
        name: Audit check cargo packages
        with:
          token: ${{ github.token }}
  bench:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            pre_script: ${{ inputs.mac_before_script }}
          - os: ubuntu-latest
            pre_script: ${{ inputs.ubuntu_before_script }}
          - os: windows-latest
            pre_script: ${{ inputs.windows_before_script }}
    steps:
      - run: ${{ matrix.pre_script }}
        if: (runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )) && matrix.pre_script != ''
      - uses: actions/checkout@v2.3.5
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
      - uses: actions/cache@v2
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          path: |
            .cache
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        with:
          command: bench