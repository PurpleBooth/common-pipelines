on:
  workflow_call:
    inputs:
      current_version:
        description: 'The current version'
        type: string
        required: true
      run_on_windows:
        description: 'Enable buiding windows binary'
        default: true
        required: false
        type: boolean
    secrets:
      committer_token:
        description: 'Commit token to use to create PRs on the homebrew repo'
        required: true
      gpg_private_key:
        description: 'The private key to sign the git repository with'
        required: true
      gpg_passphrase:
        description: 'The passphrase for the gpg key'
        required: true
      cargo_token:
        description: 'Token to publish to crates.io'
        required: false

jobs:

  build:
    runs-on: ${{ matrix.os }}
    steps:
      - run: ${{ matrix.install }}
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        env:
          DEBIAN_FRONTEND: noninteractive
        name: Install additional dependencies
      - uses: actions/checkout@v2.3.4
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Checkout the repository
        with:
          ref: v${{ inputs.current_version }}
      - uses: actions/cache@v2.1.6
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Cache cargo dependencies
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            .cache
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
      - uses: actions-rs/toolchain@v1.0.7
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Install rust toolchain
        with:
          default: true
          profile: minimal
          toolchain: stable
      - uses: actions-rs/cargo@v1.0.3
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Build release version
        with:
          args: --release
          command: build
      - id: get_repository_name
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Calculate repository name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - name: Move binary to upload location
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/$REPOSITORY_NAME$EXTENSION ./$REPOSITORY_NAME-$TARGET$EXTENSION
        shell: bash
      - uses: actions/upload-artifact@v2
        if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows == true )
        name: Store built binary version
        with:
          name: bins
          path: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target }}${{ matrix.suffix }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            suffix: ''
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            suffix: ''
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            suffix: '.exe'
            target: x86_64-unknown-linux-gnu

  github-release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        name: Checkout the repository
        with:
          ref: v${{ inputs.current_version }}
          fetch-depth: 0
      - uses: actions/cache@v2.1.6
        name: Cache cargo dependencies
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            .cache
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
      - uses: actions/download-artifact@v2
        name: Retrieve assets
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        with:
          config: cliff.toml
          args: --verbose --latest
        env:
          OUTPUT: CHANGELOG.md
      - env:
          GITHUB_TOKEN: ${{ github.token }}
        id: create_release
        uses: ncipollo/release-action@v1.8.10
        with:
          allowUpdates: true
          token: ${{ github.token }}
          bodyFile: CHANGELOG.md
          name: Release v${{ inputs.current_version }}
          tag: v${{ inputs.current_version }}
          artifacts: ./bins/*

  generate-formula:
    name: Generate Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - id: get_repository_name
        name: Work out repository name
        run: echo ::set-output "name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
        shell: bash
      - uses: actions/checkout@v2.3.4
        name: Checkout this repository
        with:
          ref: v${{ inputs.current_version }}
          path: main-repo
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          passphrase: ${{ secrets.gpg_passphrase }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          workdir: main-repo
      - uses: actions/checkout@v2.3.4
        with:
          repository: PurpleBooth/homebrew-repo
          token: ${{ secrets.committer_token }}
          path: homebrew-repo
          ref: main
        name: Checkout the custom tap
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.gpg_private_key }}
          passphrase: ${{ secrets.gpg_passphrase }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          workdir: homebrew-repo
      - run: |
          curl -Lo file.tar.gz "https://github.com/$GIT_REPO/archive/$GIT_TAG.tar.gz"
          sha256sum -b file.tar.gz | awk '{ print $1 }' > hash
          echo ::set-output "name=SHA256::$( cat hash )"
        id: hash
        shell: bash
        env:
          GIT_REPO: ${{ github.repository }}
          GIT_TAG: v${{ inputs.current_version }}
        name: Calculate the binary hash
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        with:
          config: main-repo/cliff.toml
          args: --verbose --latest --repository main-repo
        env:
          OUTPUT: CHANGELOG.md
      - uses: cuchi/jinja2-action@v1.2.0
        with:
          template: main-repo/homebrew/formula.rb.j2
          output_file: formula.rb
          variables: |
            github_repo=${{ github.repository }}
            git_tag=v${{ inputs.current_version }}
            file_sha=${{ steps.hash.outputs.SHA256 }}
        name: Generate the template
      - shell: bash
        name: Open a PR on the custom tap repository
        run: |
          VERSION="$(echo $GIT_TAG | sed 's/^refs\/tags\///')"
          git -C homebrew-repo switch -c "$REPOSITORY_NAME-$VERSION"
          cp formula.rb "homebrew-repo/Formula/$REPOSITORY_NAME.rb"
          git -C homebrew-repo add "Formula/$REPOSITORY_NAME.rb"
          git -C homebrew-repo commit -m "fix: Update $REPOSITORY_NAME to $VERSION"
          git -C homebrew-repo push origin "$REPOSITORY_NAME-$VERSION"
          (cd homebrew-repo && gh pr create --body-file "../CHANGELOG.md" --label releases --base main --fill)
        env:
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
          GIT_TAG: v${{ inputs.current_version }}
          GITHUB_TOKEN: ${{ secrets.committer_token }}

  cargo-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        name: Checkout the repository
        with:
          ref: v${{ inputs.current_version }}
      - name: Generate release
        run: |
          if [ -n "$CARGO_TOKEN" ] ; then
            cargo login "$CARGO_TOKEN"
            cargo publish
          fi
        env:
          CARGO_TOKEN: ${{ secrets.cargo_token }}
