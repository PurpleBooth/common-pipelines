on:
  workflow_call:
    inputs:
      current_version:
        description: The current version
        type: string
        required: true
      previous_version:
        description: The previous version
        type: string
        required: true
      run_on_windows:
        description: Enable buiding windows binary
        default: true
        required: false
        type: boolean
    secrets:
      committer_token:
        description: Commit token to use to create PRs on the homebrew repo
        required: true
      gpg_private_key:
        description: The private key to sign the git repository with
        required: true
      gpg_passphrase:
        description: The passphrase for the gpg key
        required: true
      cargo_token:
        description: Token to publish to crates.io
        required: false

jobs:

  build:
    runs-on: ${{ matrix.os }}
    steps:
    - run: ${{ matrix.install }}
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      env:
        DEBIAN_FRONTEND: noninteractive
      name: Install additional dependencies
    - uses: actions/checkout@v3.5.0
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Checkout the repository
      with:
        ref: v${{ inputs.current_version }}
    - uses: actions/cache@v3
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Setup Cache
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1.0.7
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Install rust toolchain
      with:
        default: true
        profile: minimal
        toolchain: stable
    - uses: actions-rs/cargo@v1.0.3
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Build release version
      with:
        args: --release
        command: build
    - id: get_repository_name
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Calculate repository name
      run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
        -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash
    - name: Move binary to upload location
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      env:
        TARGET: ${{ matrix.target }}
        EXTENSION: ${{ matrix.suffix }}
        REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
      run: mv ./target/release/$REPOSITORY_NAME$EXTENSION ./$REPOSITORY_NAME-$TARGET$EXTENSION
      shell: bash
    - uses: actions/upload-artifact@v3
      if: runner.os != 'Windows' || ( runner.os == 'Windows' && inputs.run_on_windows
        == true )
      name: Store built binary version
      with:
        name: bins
        path: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target
          }}${{ matrix.suffix }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          suffix: ''
          target: x86_64-apple-darwin
        - os: ubuntu-latest
          suffix: ''
          target: x86_64-unknown-linux-gnu
        - os: windows-latest
          suffix: .exe
          target: x86_64-pc-windows-msvc

  github-release:
    needs:
    - build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3.5.0
      name: Checkout the repository
      with:
        ref: v${{ inputs.current_version }}
        fetch-depth: 0
    - uses: actions/cache@v3
      name: Setup Cache
      with:
        path: |
          .cache
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions/download-artifact@v3
      name: Retrieve assets
    - uses: PurpleBooth/changelog-action@v0.3.3
      name: Generate changelog
      with:
        args: -v v${{ inputs.previous_version }}..v${{ inputs.current_version }}
    - env:
        GITHUB_TOKEN: ${{ github.token }}
      id: create_release
      name: Create github release
      uses: ncipollo/release-action@v1.12.0
      with:
        allowUpdates: true
        token: ${{ github.token }}
        bodyFile: CHANGELOG.md
        name: Release v${{ inputs.current_version }}
        tag: v${{ inputs.current_version }}
        artifacts: ./bins/*

  generate-formula:
    name: Generate Homebrew Formula
    runs-on: ubuntu-latest
    steps:
    - uses: PurpleBooth/generate-formula-action@v0.1.10
      name: Create PR for formula
      with:
        current_version: ${{ inputs.current_version }}
        previous_version: ${{ inputs.previous_version }}
        committer_token: ${{ secrets.committer_token }}
        gpg_private_key: ${{ secrets.gpg_private_key }}
        gpg_passphrase: ${{ secrets.gpg_passphrase }}

  cargo-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3.5.0
      name: Checkout the repository
      with:
        ref: v${{ inputs.current_version }}
    - name: Generate release
      run: |
        if [ -n "$CARGO_TOKEN" ] ; then
          cargo login "$CARGO_TOKEN"
          cargo publish
        fi
      env:
        CARGO_TOKEN: ${{ secrets.cargo_token }}
